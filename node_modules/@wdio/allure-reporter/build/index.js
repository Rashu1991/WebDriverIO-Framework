"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reporter = _interopRequireDefault(require("@wdio/reporter"));

var _allureJsCommons = _interopRequireDefault(require("allure-js-commons"));

var _step = _interopRequireDefault(require("allure-js-commons/beans/step"));

var _utils = require("./utils");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AllureReporter extends _reporter.default {
  constructor(options) {
    const outputDir = options.outputDir || 'allure-results';
    const useCucumberStepReporter = Boolean(options.useCucumberStepReporter);
    const disableMochaHooks = Boolean(options.disableMochaHooks);
    super(_objectSpread(_objectSpread({}, options), {}, {
      outputDir,
      useCucumberStepReporter,
      disableMochaHooks
    }));
    this.config = {};
    this.capabilities = {};
    this.allure = new _allureJsCommons.default();
    this.allure.setOptions({
      targetDir: outputDir
    });
    this.registerListeners();
  }

  registerListeners() {
    process.on(_constants.events.addLabel, this.addLabel.bind(this));
    process.on(_constants.events.addFeature, this.addFeature.bind(this));
    process.on(_constants.events.addStory, this.addStory.bind(this));
    process.on(_constants.events.addSeverity, this.addSeverity.bind(this));
    process.on(_constants.events.addIssue, this.addIssue.bind(this));
    process.on(_constants.events.addTestId, this.addTestId.bind(this));
    process.on(_constants.events.addEnvironment, this.addEnvironment.bind(this));
    process.on(_constants.events.addAttachment, this.addAttachment.bind(this));
    process.on(_constants.events.addDescription, this.addDescription.bind(this));
    process.on(_constants.events.startStep, this.startStep.bind(this));
    process.on(_constants.events.endStep, this.endStep.bind(this));
    process.on(_constants.events.addStep, this.addStep.bind(this));
    process.on(_constants.events.addArgument, this.addArgument.bind(this));
  }

  onRunnerStart(runner) {
    this.config = runner.config;
    this.capabilities = runner.capabilities;
    this.isMultiremote = runner.isMultiremote || false;
  }

  onSuiteStart(suite) {
    if (this.options.useCucumberStepReporter) {
      if (suite.type === 'feature') {
        return this.allure.startSuite(suite.title);
      }

      this.allure.startCase(suite.title);
      const currentTest = this.allure.getCurrentTest();
      this.getLabels(suite).forEach(({
        name,
        value
      }) => {
        currentTest.addLabel(name, value);
      });

      if (suite.description) {
        this.addDescription(suite);
      }

      return this.setCaseParameters(suite.cid);
    }

    const currentSuite = this.allure.getCurrentSuite();
    const prefix = currentSuite ? currentSuite.name + ': ' : '';
    this.allure.startSuite(prefix + suite.title);
  }

  onSuiteEnd(suite) {
    if (this.options.useCucumberStepReporter && suite.type === 'scenario') {
      suite.hooks = suite.hooks.map(hook => {
        hook.state = hook.state ? hook.state : _constants.stepStatuses.PASSED;
        return hook;
      });
      const suiteChildren = [...suite.tests, ...suite.hooks];
      const isPassed = !suiteChildren.some(item => item.state !== _constants.testStatuses.PASSED);

      if (isPassed) {
        return this.allure.endCase(_constants.testStatuses.PASSED);
      }

      const isSkipped = suiteChildren.every(item => [_constants.stepStatuses.PASSED, _constants.stepStatuses.SKIPPED].indexOf(item.state) >= 0);

      if (isSkipped) {
        return this.allure.endCase(_constants.testStatuses.PENDING);
      }

      return;
    }

    this.allure.endSuite();
  }

  onTestStart(test) {
    if (this.options.useCucumberStepReporter) {
      return this.allure.startStep(test.title);
    }

    this.allure.startCase(test.title);
    this.setCaseParameters(test.cid);
  }

  setCaseParameters(cid) {
    const currentTest = this.allure.getCurrentTest();

    if (!this.isMultiremote) {
      const {
        browserName,
        deviceName
      } = this.capabilities;
      const targetName = browserName || deviceName || cid;
      const browserstackVersion = this.capabilities.os_version || this.capabilities.osVersion;
      const version = browserstackVersion || this.capabilities.version || this.capabilities.platformVersion || '';
      const paramName = deviceName ? 'device' : 'browser';
      const paramValue = version ? `${targetName}-${version}` : targetName;
      currentTest.addParameter('argument', paramName, paramValue);
    } else {
      currentTest.addParameter('argument', 'isMultiremote', 'true');
    }

    currentTest.addLabel('language', 'javascript');
    currentTest.addLabel('framework', 'wdio');
    currentTest.addLabel('thread', cid);
  }

  getLabels({
    tags
  }) {
    const labels = [];

    if (tags) {
      tags.forEach(tag => {
        const label = tag.name.replace(/[@]/, '').split('=');

        if (label.length === 2) {
          labels.push({
            name: label[0],
            value: label[1]
          });
        }
      });
    }

    return labels;
  }

  onTestPass() {
    if (this.options.useCucumberStepReporter) {
      return this.allure.endStep(_constants.stepStatuses.PASSED);
    }

    this.allure.endCase(_constants.testStatuses.PASSED);
  }

  onTestFail(test) {
    if (this.options.useCucumberStepReporter) {
      const testStatus = (0, _utils.getTestStatus)(test, this.config);
      const stepStatus = Object.values(_constants.stepStatuses).indexOf(testStatus >= 0) ? testStatus : _constants.stepStatuses.FAILED;
      this.allure.endStep(stepStatus);
      this.allure.endCase(testStatus, (0, _utils.getErrorFromFailedTest)(test));
      return;
    }

    if (!this.isAnyTestRunning()) {
      this.allure.startCase(test.title);
    } else {
      this.allure.getCurrentTest().name = test.title;
    }

    const status = (0, _utils.getTestStatus)(test, this.config);

    while (this.allure.getCurrentSuite().currentStep instanceof _step.default) {
      this.allure.endStep(status);
    }

    this.allure.endCase(status, (0, _utils.getErrorFromFailedTest)(test));
  }

  onTestSkip(test) {
    if (this.options.useCucumberStepReporter) {
      this.allure.endStep(_constants.stepStatuses.CANCELED);
    } else if (!this.allure.getCurrentTest() || this.allure.getCurrentTest().name !== test.title) {
      this.allure.pendingCase(test.title);
    } else {
      this.allure.endCase(_constants.testStatuses.PENDING);
    }
  }

  onBeforeCommand(command) {
    if (!this.isAnyTestRunning()) {
      return;
    }

    if (this.options.disableWebdriverStepsReporting || this.options.useCucumberStepReporter || this.isMultiremote) {
      return;
    }

    this.allure.startStep(`${command.method} ${command.endpoint}`);

    if (!(0, _utils.isEmpty)(command.body)) {
      this.dumpJSON('Request', command.body);
    }
  }

  onAfterCommand(command) {
    if (!this.isAnyTestRunning() || this.isMultiremote) {
      return;
    }

    const {
      disableWebdriverStepsReporting,
      disableWebdriverScreenshotsReporting,
      useCucumberStepReporter
    } = this.options;

    if (this.isScreenshotCommand(command) && command.result.value) {
      if (!disableWebdriverScreenshotsReporting) {
        this.allure.addAttachment('Screenshot', Buffer.from(command.result.value, 'base64'));
      }
    }

    if (!disableWebdriverStepsReporting && !useCucumberStepReporter) {
      if (command.result && command.result.value && !this.isScreenshotCommand(command)) {
        this.dumpJSON('Response', command.result.value);
      }

      const suite = this.allure.getCurrentSuite();

      if (!suite || !(suite.currentStep instanceof _step.default)) {
        return;
      }

      this.allure.endStep(_constants.testStatuses.PASSED);
    }
  }

  onHookStart(hook) {
    if (!hook.parent || !this.allure.getCurrentSuite()) {
      return false;
    }

    if (this.options.disableMochaHooks && (0, _utils.isMochaEachHooks)(hook.title)) {
      if (this.allure.getCurrentTest()) {
        this.allure.startStep(hook.title);
      }

      return;
    }

    if (this.options.disableMochaHooks && (0, _utils.isMochaAllHooks)(hook.title)) {
      return;
    }

    this.onTestStart(hook);
  }

  onHookEnd(hook) {
    if (!hook.parent || !this.allure.getCurrentSuite() || this.options.disableMochaHooks && !(0, _utils.isMochaAllHooks)(hook.title) && !this.allure.getCurrentTest()) {
      return false;
    }

    if (this.options.disableMochaHooks && (0, _utils.isMochaEachHooks)(hook.title)) {
      if (hook.error) {
        this.allure.endStep(_constants.stepStatuses.FAILED);
      } else {
        this.allure.endStep(_constants.stepStatuses.PASSED);
      }

      return;
    }

    if (hook.error) {
      if (this.options.disableMochaHooks && (0, _utils.isMochaAllHooks)(hook.title)) {
        this.onTestStart(hook);
      }

      this.onTestFail(hook);
    } else if (this.options.disableMochaHooks || this.options.useCucumberStepReporter) {
      if (!(0, _utils.isMochaAllHooks)(hook.title)) {
        this.onTestPass();

        if (this.allure.getCurrentTest().steps.length === 0 && !this.options.useCucumberStepReporter) {
          this.allure.getCurrentSuite().testcases.pop();
        } else if (this.options.useCucumberStepReporter) {
          const step = this.allure.getCurrentTest().steps.pop();

          if (step && step.attachments.length >= 1) {
            step.attachments.forEach(attachment => {
              this.allure.getCurrentTest().addAttachment(attachment);
            });
          }
        }
      }
    } else if (!this.options.disableMochaHooks) this.onTestPass();
  }

  addLabel({
    name,
    value
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel(name, value);
  }

  addStory({
    storyName
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('story', storyName);
  }

  addFeature({
    featureName
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('feature', featureName);
  }

  addSeverity({
    severity
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('severity', severity);
  }

  addIssue({
    issue
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    const issueLink = (0, _utils.getLinkByTemplate)(this.options.issueLinkTemplate, issue);
    test.addLabel('issue', issueLink);
  }

  addTestId({
    testId
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    const tmsLink = (0, _utils.getLinkByTemplate)(this.options.tmsLinkTemplate, testId);
    test.addLabel('testId', tmsLink);
  }

  addEnvironment({
    name,
    value
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addParameter('environment-variable', name, value);
  }

  addDescription({
    description,
    descriptionType
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.setDescription(description, descriptionType);
  }

  addAttachment({
    name,
    content,
    type = 'text/plain'
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    if (type === 'application/json') {
      this.dumpJSON(name, content);
    } else {
      this.allure.addAttachment(name, Buffer.from(content), type);
    }
  }

  startStep(title) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    this.allure.startStep(title);
  }

  endStep(status) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    this.allure.endStep(status);
  }

  addStep({
    step
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    this.startStep(step.title);

    if (step.attachment) {
      this.addAttachment(step.attachment);
    }

    this.endStep(step.status);
  }

  addArgument({
    name,
    value
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addParameter('argument', name, value);
  }

  isAnyTestRunning() {
    return this.allure.getCurrentSuite() && this.allure.getCurrentTest();
  }

  isScreenshotCommand(command) {
    const isScrenshotEndpoint = /\/session\/[^/]*\/screenshot/;
    return isScrenshotEndpoint.test(command.endpoint);
  }

  dumpJSON(name, json) {
    this.allure.addAttachment(name, JSON.stringify(json, null, 2), 'application/json');
  }

}

_defineProperty(AllureReporter, "addFeature", featureName => {
  (0, _utils.tellReporter)(_constants.events.addFeature, {
    featureName
  });
});

_defineProperty(AllureReporter, "addLabel", (name, value) => {
  (0, _utils.tellReporter)(_constants.events.addLabel, {
    name,
    value
  });
});

_defineProperty(AllureReporter, "addSeverity", severity => {
  (0, _utils.tellReporter)(_constants.events.addSeverity, {
    severity
  });
});

_defineProperty(AllureReporter, "addIssue", issue => {
  (0, _utils.tellReporter)(_constants.events.addIssue, {
    issue
  });
});

_defineProperty(AllureReporter, "addTestId", testId => {
  (0, _utils.tellReporter)(_constants.events.addTestId, {
    testId
  });
});

_defineProperty(AllureReporter, "addStory", storyName => {
  (0, _utils.tellReporter)(_constants.events.addStory, {
    storyName
  });
});

_defineProperty(AllureReporter, "addEnvironment", (name, value) => {
  (0, _utils.tellReporter)(_constants.events.addEnvironment, {
    name,
    value
  });
});

_defineProperty(AllureReporter, "addDescription", (description, descriptionType) => {
  (0, _utils.tellReporter)(_constants.events.addDescription, {
    description,
    descriptionType
  });
});

_defineProperty(AllureReporter, "addAttachment", (name, content, type = 'text/plain') => {
  (0, _utils.tellReporter)(_constants.events.addAttachment, {
    name,
    content,
    type
  });
});

_defineProperty(AllureReporter, "startStep", title => {
  (0, _utils.tellReporter)(_constants.events.startStep, title);
});

_defineProperty(AllureReporter, "endStep", (status = _constants.stepStatuses.PASSED) => {
  if (!Object.values(_constants.stepStatuses).includes(status)) {
    throw new Error(`Step status must be ${Object.values(_constants.stepStatuses).join(' or ')}. You tried to set "${status}"`);
  }

  (0, _utils.tellReporter)(_constants.events.endStep, status);
});

_defineProperty(AllureReporter, "addStep", (title, {
  content,
  name = 'attachment',
  type = 'text/plain'
} = {}, status = _constants.stepStatuses.PASSED) => {
  if (!Object.values(_constants.stepStatuses).includes(status)) {
    throw new Error(`Step status must be ${Object.values(_constants.stepStatuses).join(' or ')}. You tried to set "${status}"`);
  }

  const step = content ? {
    title,
    attachment: {
      content,
      name,
      type
    },
    status
  } : {
    title,
    status
  };
  (0, _utils.tellReporter)(_constants.events.addStep, {
    step
  });
});

_defineProperty(AllureReporter, "addArgument", (name, value) => {
  (0, _utils.tellReporter)(_constants.events.addArgument, {
    name,
    value
  });
});

var _default = AllureReporter;
exports.default = _default;