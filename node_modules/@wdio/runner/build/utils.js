"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runHook = runHook;
exports.sanitizeCaps = sanitizeCaps;
exports.initialiseInstance = initialiseInstance;
exports.filterLogTypes = filterLogTypes;
exports.sendFailureMessage = sendFailureMessage;
exports.getInstancesData = getInstancesData;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _webdriverio = require("webdriverio");

var _webdriver = _interopRequireDefault(require("webdriver"));

var _config = require("@wdio/config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const log = (0, _logger.default)('@wdio/local-runner:utils');
const MERGE_OPTIONS = {
  clone: false
};
const mochaAllHooks = ['"before all" hook', '"after all" hook'];

function runHook(hookName, config, caps, specs) {
  const catchFn = e => log.error(`Error in ${hookName}: ${e.stack}`);

  return config && Array.isArray(config[hookName]) ? Promise.all(config[hookName].map(hook => {
    try {
      return hook(config, caps, specs);
    } catch (e) {
      return catchFn(e);
    }
  })).catch(catchFn) : undefined;
}

function sanitizeCaps(caps, filterOut) {
  const defaultConfigsKeys = [...Object.keys((0, _config.DEFAULT_CONFIGS)()), ...Object.keys(_webdriver.default.DEFAULTS)];
  return Object.keys(caps).filter(key => !defaultConfigsKeys.includes(key) === !filterOut).reduce((obj, key) => {
    obj[key] = caps[key];
    return obj;
  }, {});
}

async function initialiseInstance(config, capabilities, isMultiremote) {
  if (config.sessionId) {
    log.debug(`attach to session with id ${config.sessionId}`);
    config.capabilities = sanitizeCaps(capabilities);
    return (0, _webdriverio.attach)(_objectSpread({}, config));
  }

  if (!isMultiremote) {
    log.debug('init remote session');

    const sessionConfig = _objectSpread(_objectSpread({}, config), sanitizeCaps(capabilities, true));

    sessionConfig.capabilities = sanitizeCaps(capabilities);
    return (0, _webdriverio.remote)(sessionConfig);
  }

  const options = {};
  log.debug('init multiremote session');
  delete config.capabilities;

  for (let browserName of Object.keys(capabilities)) {
    options[browserName] = (0, _deepmerge.default)(config, capabilities[browserName], MERGE_OPTIONS);
  }

  const browser = await (0, _webdriverio.multiremote)(options, config);

  for (let browserName of Object.keys(capabilities)) {
    global[browserName] = browser[browserName];
  }

  return browser;
}

function filterLogTypes(excludeDriverLogs, driverLogTypes) {
  let logTypes = [...driverLogTypes];

  if (Array.isArray(excludeDriverLogs)) {
    log.debug('filtering logTypes', logTypes);

    if (excludeDriverLogs.length === 1 && excludeDriverLogs[0] === '*') {
      logTypes = [];
    } else {
      logTypes = logTypes.filter(x => !excludeDriverLogs.includes(x));
    }

    log.debug('filtered logTypes', logTypes);
  }

  return logTypes;
}

function sendFailureMessage(e, payload) {
  if (e === 'test:fail' || e === 'hook:end' && payload.error && mochaAllHooks.some(hook => payload.title.startsWith(hook))) {
    process.send({
      origin: 'reporter',
      name: 'printFailureMessage',
      content: payload
    });
  }
}

function getInstancesData(browser, isMultiremote) {
  let instances;

  if (isMultiremote) {
    instances = {};
    browser.instances.forEach(i => {
      const {
        protocol,
        hostname,
        port,
        path,
        queryParams
      } = browser[i].options;
      const {
        isW3C,
        sessionId
      } = browser[i];
      instances[i] = {
        sessionId,
        isW3C,
        protocol,
        hostname,
        port,
        path,
        queryParams
      };
    });
  }

  return instances;
}